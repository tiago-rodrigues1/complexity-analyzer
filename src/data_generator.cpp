#include <iostream>
#include <vector>
#include <numeric>
#include <algorithm>
#include <functional>
#include <string>

class data_generator {
public:
    data_generator(int n) : size(n) { //construtor cria um vetor de tamanho n e cria um vector interno com n posições
        data.resize(n);
    }

    void run_data_generator(std::function<void(std::vector<int>&)> algorithm) {

        for (int n : input_sizes) {
            exec_times.clear();

            // cria vetor de teste
            auto partitioned = partition_vector(values, n);

            for (int i = 0; i < repetitions; ++i) {
                auto copy = partitioned[0];

                auto start = std::chrono::high_resolution_clock::now();

                algorithm(copy);

                auto end = std::chrono::high_resolution_clock::now();
                std::chrono::duration<double> duration = end - start;

                exec_times.push_back(duration.count());
            }

            double sum_times = std::accumulate(
                exec_times.begin(), exec_times.end(), 0.0
            );
            double avg_time = sum_times / repetitions;

            results.push_back({n, avg_time});
        }
    }

private:
    struct Result {
        int n;
        double avg_time;
    };

    int size;
    std::vector<int> data;

    std::vector<int> input_sizes = {100, 500, 800, 1000};
    int repetitions = 5;

    std::vector<int> values{
        882,190,883,159,43,912,238,355,820,544,708,74,217,273,347,337,812,771,517,922,195,460,397,566,619,993,901,897,932,646,984,353,842,263,345,195,669,5,164,984,365,194,487,763,287,636,322,939,998,776,710,131,159,660,538,544,337,954,223,320,118,151,734,245,138,187,675,661,510,835,960,977,358,229,916,331,778,509,721,444,762,327,52,21,471,550,346,918,177,272,495,361,724,363,954,559,7,471,916,545,54,43,479,616,182,976,773,262,724,124,285,815,591,827,412,129,396,689,15,496,943,387,643,636,585,272,655,516,126,595,225,879,707,876,94,677,284,559,737,972,697,670,552,288,936,666,147,306,122,235,539,501,373,739,57,44,45,940,421,225,600,184,425,714,416,447,50,469,296,372,654,591,211,15,715,495,294,71,362,198,811,161,260,890,488,578,141,865,874,412,826,302,685,776,589,770,387,167,838,700,184,922,626,609,315,519,615,461,429,114,214,812,383,217,744,249,898,352,787,161,883,861,974,349,546,617,937,315,208,381,263,839,870,837,863,354,234,569,259,614,80,511,113,284,201,44,206,409,554,173,522,596,962,103,5,330,682,951,634,320,686,387,421,991,827,788,378,689,295,281,783,880,738,242,89,641,66,596,836,92,92,298,263,724,175,460,473,983,283,906,472,602,101,333,561,162,539,524,425,160,206,246,792,645,884,245,67,85,510,261,508,6,910,995,817,638,976,194,601,965,809,60,357,585,709,479,628,629,900,385,356,228,201,526,227,327,328,223,300,316,499,706,180,296,132,216,314,651,409,770,920,985,497,238,620,212,175,177,337,667,643,637,149,43,858,114,621,662,676,773,796,190,403,231,279,67,714,936,399,66,963,48,344,928,117,686,63,54,980,412,260,89,84,743,23,445,450,26,553,97,618,987,657,43,94,478,881,733,267,878,327,247,43,250,783,137,617,139,507,367,123,910,422,856,158,126,347,447,700,338,398,10,107,30,759,158,304,85,350,6,462,254,745,462,958,704,216,460,763,507,990,277,659,15,483,245,346,238,45,139,416,306,713,274,974,400,695,309,866,525,16,467,881,729,313,821,183,658,288,234,297,133,468,358,328,810,524,169,996,576,43,312,702,871,270,803,562,300,288,257,702,661,389,262,940,499,647,865,74,216,175,100,157,968,291,457,981,554,635,80,658,256,668,695,54,215,410,234,980,836,885,282,581,982,215,456,451,355,731,379,974,519,618,443,82,93,239,329,186,685,275,515,103,40,128,976,138,559,323,454,56,195,887,319,649,310,826,786,920,86,932,166,753,219,444,955,654,659,31,467,745,524,274,872,757,859,220,117,723,332,808,186,945,523,907,447,209,676,955,456,684,292,832,729,129,67,397,233,643,585,787,714,521,643,427,161,205,116,631,78,710,214,509,227,90,867,283,184,583,338,645,48,803,677,239,944,682,505,759,746,860,209,780,45,357,386,562,338,988,20,703,111,958,170,276,263,119,615,775,622,592,22,691,833,440,729,4,107,337,339,985,825,62,844,425,822,766,690,843,723,686,491,952,745,862,994,867,527,267,797,385,635,102,752,524,152,549,889,41,322,523,121,993,505,765,170,913,871,861,221,172,823,34,432,267,202,476,538,581,857,907,697,88,526,279,798,398,715,843,43,670,394,749,531,781,446,155,975,415,451,411,610,365,485,491,996,585,426,103,166,689,725,542,648,174,405,247,229,170,401,578,985,559,679,238,76,164,436,132,824,596,87,103,516,547,171,793,776,503,365,954,208,17,911,860,936,94,600,554,119,391,539,204,937,416,538,879,283,724,454,584,872,452,87,530,677,889,731,930,201,527,89,931,253,95,120,958,726,62,215,290,416,247,609,300,494,671,555,321,634,535,457,420,847,313,884,798,518,674,112,541,455,899,900,326,396,973,124,320,952,246,532,228,772,989,736,616,691,693,854,669,369,404,162,527,803,576,331,844,969,500,338,680,983,170,488,389,179,961,216,349,60,123,978,746,741,589,524,567,21,973,388,797,543,859,619,783,971,802,808,838,422,310,715,305,29,85,114,815,48,624,638,419,136,581,960,341,500,417,91,567,416,123,131,381,418,160,39,499,131,907,879,635,685,331,775,540,444,277,506,470,388,543,142,234,644,643,879,246,334,626,317,156,794,181,208,203,862,101,120,43,599,787,48,371,350,270,883,857,531,110,699,414,272,470,153,25,1000,110,630,417,738,720,709,363,889,480,973,169,179,577,878,917,448,634,387,574,69,321,615
    };

    std::vector<double> exec_times;
    std::vector<Result> results;

    //particiona o vetor original em sub-vetores de tamanho n
    std::vector<std::vector<int>> partition_vector(const std::vector<int>& original, size_t partition_size){
        std::vector<std::vector<int>> result;

        if (partition_size == 0) return result;

        auto it = original.cbegin();
        const auto end = original.cend();

        while (it != end) {
            auto end_partition = std::distance(it, end) < partition_size
                                  ? end
                                  : std::next(it, partition_size);

            result.emplace_back(it, end_partition);
            it = end_partition;
        }

        return result;
    }
};
